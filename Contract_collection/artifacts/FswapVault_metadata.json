{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "contract IERC20",
						"name": "_token",
						"type": "address"
					},
					{
						"internalType": "contract IERC20",
						"name": "_receiptToken",
						"type": "address"
					},
					{
						"internalType": "contract IMasterChef",
						"name": "_masterchef",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_treasury",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lastDepositedTime",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "performanceFee",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "callFee",
						"type": "uint256"
					}
				],
				"name": "Harvest",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Pause",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpause",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "MAX_CALL_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_PERFORMANCE_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_WITHDRAW_FEE",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_WITHDRAW_FEE_PERIOD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "admin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "available",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "calculateHarvestFswapRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "calculateTotalPendingFswapRewards",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "callFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "emergencyWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPricePerFullShare",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "harvest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "inCaseTokensGetStuck",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastHarvestedTime",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "masterchef",
				"outputs": [
					{
						"internalType": "contract IMasterChef",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "performanceFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "receiptToken",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_admin",
						"type": "address"
					}
				],
				"name": "setAdmin",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_callFee",
						"type": "uint256"
					}
				],
				"name": "setCallFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_performanceFee",
						"type": "uint256"
					}
				],
				"name": "setPerformanceFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_treasury",
						"type": "address"
					}
				],
				"name": "setTreasury",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_withdrawFee",
						"type": "uint256"
					}
				],
				"name": "setWithdrawFee",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_withdrawFeePeriod",
						"type": "uint256"
					}
				],
				"name": "setWithdrawFeePeriod",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "contract IERC20",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalShares",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "treasury",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unpause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "shares",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastDepositedTime",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "fswapAtLastUserAction",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lastUserActionTime",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_shares",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawAll",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawFee",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "withdrawFeePeriod",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"available()": {
					"details": "The contract puts 100% of the tokens to work."
				},
				"balanceOf()": {
					"details": "It includes tokens held by the contract and held in MasterChef"
				},
				"calculateHarvestFswapRewards()": {
					"returns": {
						"_0": "Expected reward to collect in CAKE"
					}
				},
				"calculateTotalPendingFswapRewards()": {
					"returns": {
						"_0": "Returns total pending fswap rewards"
					}
				},
				"constructor": {
					"params": {
						"_admin": ": address of the admin",
						"_masterchef": ": MasterChef contract",
						"_receiptToken": ": Syrup token contract",
						"_token": ": Fswap token contract",
						"_treasury": ": address of the treasury (collects fees)"
					}
				},
				"deposit(uint256)": {
					"details": "Only possible when contract not paused.",
					"params": {
						"_amount": ": number of tokens to deposit (in CAKE)"
					}
				},
				"emergencyWithdraw()": {
					"details": "EMERGENCY ONLY. Only callable by the contract admin."
				},
				"harvest()": {
					"details": "Only possible when contract not paused."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pause()": {
					"details": "Only possible when contract not paused."
				},
				"paused()": {
					"details": "Returns true if the contract is paused, and false otherwise."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"setAdmin(address)": {
					"details": "Only callable by the contract owner."
				},
				"setCallFee(uint256)": {
					"details": "Only callable by the contract admin."
				},
				"setPerformanceFee(uint256)": {
					"details": "Only callable by the contract admin."
				},
				"setTreasury(address)": {
					"details": "Only callable by the contract owner."
				},
				"setWithdrawFee(uint256)": {
					"details": "Only callable by the contract admin."
				},
				"setWithdrawFeePeriod(uint256)": {
					"details": "Only callable by the contract admin."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unpause()": {
					"details": "Only possible when contract is paused."
				},
				"withdraw(uint256)": {
					"params": {
						"_shares": ": Number of shares to withdraw"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"available()": {
					"notice": "Custom logic for how much the vault allows to be borrowed"
				},
				"balanceOf()": {
					"notice": "Calculates the total underlying tokens"
				},
				"calculateHarvestFswapRewards()": {
					"notice": "Calculates the expected harvest reward from third party"
				},
				"calculateTotalPendingFswapRewards()": {
					"notice": "Calculates the total pending rewards that can be restaked"
				},
				"constructor": "Constructor",
				"deposit(uint256)": {
					"notice": "Deposits funds into the Fswap Vault"
				},
				"emergencyWithdraw()": {
					"notice": "Withdraws from MasterChef to Vault without caring about rewards."
				},
				"getPricePerFullShare()": {
					"notice": "Calculates the price per share"
				},
				"harvest()": {
					"notice": "Reinvests CAKE tokens into MasterChef"
				},
				"inCaseTokensGetStuck(address)": {
					"notice": "Withdraw unexpected tokens sent to the Fswap Vault"
				},
				"pause()": {
					"notice": "Triggers stopped state"
				},
				"setAdmin(address)": {
					"notice": "Sets admin address"
				},
				"setCallFee(uint256)": {
					"notice": "Sets call fee"
				},
				"setPerformanceFee(uint256)": {
					"notice": "Sets performance fee"
				},
				"setTreasury(address)": {
					"notice": "Sets treasury address"
				},
				"setWithdrawFee(uint256)": {
					"notice": "Sets withdraw fee"
				},
				"setWithdrawFeePeriod(uint256)": {
					"notice": "Sets withdraw fee period"
				},
				"unpause()": {
					"notice": "Returns to normal state"
				},
				"withdraw(uint256)": {
					"notice": "Withdraws from funds from the Fswap Vault"
				},
				"withdrawAll()": {
					"notice": "Withdraws all funds for a user"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Contract_collection/AutoFswap.sol": "FswapVault"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Contract_collection/AutoFswap.sol": {
			"keccak256": "0x1455874939a72862eba240acb2ae299dd59a62a6fe9bad0c0ef0641bd9bc8536",
			"license": "MIT",
			"urls": [
				"bzz-raw://1f2bbefb222d4cc0b60e5e69237e51e997556f9e2d25703499cb565da012943f",
				"dweb:/ipfs/QmRcAZ1FqorC2p9fN4aZgj2sNbUbg6ARw8jW6MaGft8oHn"
			]
		}
	},
	"version": 1
}